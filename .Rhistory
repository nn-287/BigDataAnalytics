geom_text(aes(label = Freq), color = "black") +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Confusion Matrix",
x = "Predicted",
y = "Actual") +
theme_minimal()
ggplot(conf_mat_df, aes(x = Predicted, y = Actual, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "black") +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Confusion Matrix",
x = "Predicted",
y = "Actual") +
theme_minimal()
rlang::last_trace()
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Convert the matrix to a data frame
conf_mat_df <- as.data.frame(conf_mat)
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Convert the matrix to a data frame
conf_mat_df <- as.data.frame(conf_mat)
# Plot the heatmap using base R graphics
heatmap(conf_mat_df, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap Example")
heatmap(conf_mat, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap Example")
conf_mat_values <- c(conf_mat[1,1], conf_mat[2,1], conf_mat[1,2], conf_mat[2,2])
bar_labels <- c("True Negative", "False Negative", "False Positive", "True Positive")
barplot(conf_mat_values, names.arg = bar_labels, col = c("green", "red", "red", "green"),
main = "Confusion Matrix", xlab = "Predicted", ylab = "Count")
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count")
conf_mat_values <- c(conf_mat[1,1], conf_mat[2,1], conf_mat[1,2], conf_mat[2,2])
bar_labels <- c("True Negative", "False Negative", "False Positive", "True Positive")
barplot(conf_mat_values, names.arg = bar_labels, col = c("green", "red", "red", "green"),
main = "Confusion Matrix", xlab = "Predicted", ylab = "Count")
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the pie chart
pie(survival_df$Count, labels = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic")
View(ship_df)
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the histogram chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count", beside = TRUE)
# Create a data frame with survival results
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = c(85, 58))
# Create a sequence of values to use as x-coordinates
x <- seq_along(survival_df$Survived)
# Plot the overlaying graph
plot(x, survival_df$Count, type = "l", lwd = 2, col = "blue", ylim = c(0, max(survival_df$Count)),
xlab = "Survived", ylab = "Count", main = "Survival in Titanic")
lines(x, survival_df$Count, type = "l", lwd = 2, col = "red")
# Add a legend
legend("topright", legend = survival_df$Survived, col = c("blue", "red"), lwd = 2, cex = 0.8)
# Create a data frame with survival results
survival_df <- data.frame(Survived = c("yes", "No"),
Count = c(85, 58))
# Create a sequence of values to use as x-coordinates
x <- seq_along(survival_df$Survived)
# Plot the overlaying graph
plot(x, survival_df$Count, type = "l", lwd = 2, col = "blue", ylim = c(0, max(survival_df$Count)),
xlab = "Survived", ylab = "Count", main = "Survival in Titanic")
lines(x, survival_df$Count, type = "l", lwd = 2, col = "red")
# Add a legend
legend("topright", legend = survival_df$Survived, col = c("blue", "red"), lwd = 2, cex = 0.8)
# Define the confusion matrix
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
survival_df <- data.frame(Survived = c("yes", "No"),
Count = survival_counts)
# Plot the bar chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count")
# Define the confusion matrix
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the histogram chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count", beside = TRUE)
# Define the confusion matrix
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the pie chart
pie(survival_df$Count, labels = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic")
# Create a data frame with survival results
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = c(85, 58))
# Create a sequence of values to use as x-coordinates
x <- seq_along(survival_df$Survived)
# Plot the overlaying graph
plot(x, survival_df$Count, type = "l", lwd = 2, col = "blue", ylim = c(0, max(survival_df$Count)),
xlab = "Survived", ylab = "Count", main = "Survival in Titanic")
lines(x, survival_df$Count, type = "l", lwd = 2, col = "red")
# Add a legend
legend("topright", legend = survival_df$Survived, col = c("blue", "red"), lwd = 2, cex = 0.8)
# Create a data frame with survival results
survival_df <- data.frame(Survived = c("yes", "No"),
Count = c(85, 58))
# Create a sequence of values to use as x-coordinates
x <- seq_along(survival_df$Survived)
# Plot the overlaying graph
plot(x, survival_df$Count, type = "l", lwd = 2, col = "blue", ylim = c(0, max(survival_df$Count)),
xlab = "Survived", ylab = "Count", main = "Survival in Titanic")
lines(x, survival_df$Count, type = "l", lwd = 2, col = "red")
# Add a legend
legend("topright", legend = survival_df$Survived, col = c("blue", "red"), lwd = 2, cex = 0.8)
mean_values <- colMeans(ship_df)
print(mean_values)
print(std_values)
std_values <- apply(ship_df, 2, sd)
print(std_values)
barplot(mean_values, main = "Mean Values", xlab = "Columns", ylab = "Mean", col = "blue")
barplot(std_values, main = "std Values", xlab = "Columns", ylab = "Mean", col = "green")
cor_matrix <- cor(df_num)
cor_matrix <- cor(ship_df)
heatmap(cor_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Correlation Heatmap", xlab = "Columns", ylab = "Columns")
head(ship_df)
null_columns <- colnames(ship_df)[apply(is.na(ship_df), 2, any)]
# Calculate the sum of null values in each column
null_sum <- colSums(is.na(titanic))
null_columns <- colnames(ship_df)[apply(is.na(ship_df), 2, any)]
# Calculate the sum of null values in each column
null_sum <- colSums(is.na(ship_df))
# Print the null columns and their respective null value counts
print(null_columns)
print(null_sum)
head(ship_df,10)
data<-read.csv(file="C:/Users/Nancy/Desktop/BigData project/titanic.csv", header = TRUE, sep = ",")
head(data)
ship_df = data.frame(data$Name,data$Pclass,data$Sex,data$Age,data$SibSp,data$Parch,data$Ticket,data$Fare,data$Cabin,data$Embarked,data$Survived)
head(ship_df,10)
mean_values <- colMeans(ship_df)
ship_df <- subset(ship_df, select = -c(data.Name, data.SibSp, data.Parch, data.Ticket,data.Cabin,data.Embarked))
head(ship_df)
mean_values <- colMeans(ship_df)
data<-read.csv(file="C:/Users/Nancy/Desktop/BigData project/titanic.csv", header = TRUE, sep = ",")
head(data)
ship_df = data.frame(data$Name,data$Pclass,data$Sex,data$Age,data$SibSp,data$Parch,data$Ticket,data$Fare,data$Cabin,data$Embarked,data$Survived)
head(ship_df,10)
null_columns <- colnames(ship_df)[apply(is.na(ship_df), 2, any)]
# Calculate the sum of null values in each column
null_sum <- colSums(is.na(ship_df))
# Print the null columns and their respective null value counts
print(null_columns)
print(null_sum)
barplot(null_columns, main = "Null Value Counts", xlab = "Columns", ylab = "Null Value Count", col = "blue")
barplot(null_sum, main = "Null Value Counts", xlab = "Columns", ylab = "Null Value Count", col = "blue")
ship_df <- subset(ship_df, select = -c(data.Name, data.SibSp, data.Parch, data.Ticket,data.Cabin,data.Embarked))
head(ship_df)
dim(ship_df)
ship_df$data.Sex <- ifelse(ship_df$data.Sex == "female", 1, 0)#0=>Male, 1=>Female
head(ship_df,10)
inputs$Age[is.na(inputs$Age)] <- mean(inputs$Age, na.rm = TRUE)
ship_df<-ship_df$Age[is.na(ship_df$Age)] <- mean(ship_df$Age, na.rm = TRUE)
mean_age <- mean(ship_df$Age, na.rm = TRUE)
mean_age <- mean(ship_df$Age)
ship_df$Age <- as.numeric(ship_df$Age)
ship_df$Age <- as.numeric(as.character(ship_df$Age))
unique_values <- unique(ship_df$Age)
print(unique_values)
View(ship_df)
unique_values <- unique(ship_df$data.Age)
print(unique_values)
ship_df<-ship_df$data.Age[is.na(ship_df$data.Age)] <- mean(ship_df$data.Age, na.rm = TRUE)
head(ship_df,10)
ship_df$data.Age<-ship_df$data.Age[is.na(ship_df$data.Age)] <- mean(ship_df$data.Age, na.rm = TRUE)
ship_df$data.Age[is.na(ship_df$data.Age)] <- mean(ship_df$data.Age, na.rm = TRUE)
ship_df$data.Age[is.na(ship_df$data.Age)] <- mean(ship_df$data.Age, na.rm = TRUE)
mean_age <- mean(ship_df$data.Age, na.rm = TRUE)
dim(ship_df)
data<-read.csv(file="C:/Users/Nancy/Desktop/BigData project/titanic.csv", header = TRUE, sep = ",")
head(data)
ship_df = data.frame(data$Name,data$Pclass,data$Sex,data$Age,data$SibSp,data$Parch,data$Ticket,data$Fare,data$Cabin,data$Embarked,data$Survived)
head(ship_df,10)
ship_df <- subset(ship_df, select = -c(data.Name, data.SibSp, data.Parch, data.Ticket,data.Cabin,data.Embarked))
head(ship_df)
dim(ship_df)
ship_df$data.Sex <- ifelse(ship_df$data.Sex == "female", 1, 0)#0=>Male, 1=>Female
mean_age <- mean(ship_df$data.Age, na.rm = TRUE)
ship_df$data.Age[is.na(ship_df$data.Age)] <- mean_age
head(ship_df,10)
dim(ship_df)
mean_values <- colMeans(ship_df)
print(mean_values)
barplot(mean_values, main = "Mean Values", xlab = "Columns", ylab = "Mean", col = "blue")
std_values <- apply(ship_df, 2, sd)
print(std_values)
barplot(std_values, main = "std Values", xlab = "Columns", ylab = "Mean", col = "green")
cor_matrix <- cor(ship_df)
heatmap(cor_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Correlation Heatmap", xlab = "Columns", ylab = "Columns")
install.packages("caTools")
install.packages("caTools")
head(ship_df,10)
dim(ship_df)
install.packages("caret")
library(caTools)
library(caret)
split <- sample.split(ship_df, SplitRatio = 0.8)
train_data <- subset(ship_df, split == "TRUE")
test_data <- subset(ship_df, split == "FALSE")
str(train_data)
train_scale <- scale(train_data[, 1:4])
test_scale <- scale(test_data[, 1:4])
dim(train_data)
dim(test_data)
Y<-as.factor(train_data$data.Survived)
classifier_naive <- naive_bayes(Y~ ., data = train_data)
install.packages("naivebayes")
library(naivebayes)
classifier_naive <- naive_bayes(Y~ ., data = train_data)
classifier_naive
y_pred <- predict(classifier_naive, newdata = test_data)
conf_mat <- table(test_data$data.Survived,y_pred)
print(conf_mat)
install.packages("e1071")
library(e1071)
confusionMatrix(conf_mat)
conf_mat_values <- c(conf_mat[1,1], conf_mat[2,1], conf_mat[1,2], conf_mat[2,2])
bar_labels <- c("True Negative", "False Negative", "False Positive", "True Positive")
barplot(conf_mat_values, names.arg = bar_labels, col = c("green", "red", "red", "green"),
main = "Confusion Matrix", xlab = "Predicted", ylab = "Count")
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the bar chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count")
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
heatmap(conf_mat, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Heatmap Example")
conf_mat_values <- c(conf_mat[1,1], conf_mat[2,1], conf_mat[1,2], conf_mat[2,2])
bar_labels <- c("True Negative", "False Negative", "False Positive", "True Positive")
barplot(conf_mat_values, names.arg = bar_labels, col = c("green", "red", "red", "green"),
main = "Confusion Matrix", xlab = "Predicted", ylab = "Count")
# Assuming the confusion matrix is stored in the 'conf_mat' variable
# Extract the values from the confusion matrix
values <- c(conf_mat[1, 1], conf_mat[1, 2], conf_mat[2, 1], conf_mat[2, 2])
# Create names for the bars
bar_names <- c("True Negative", "False Positive", "False Negative", "True Positive")
# Plot the bar chart
barplot(values, names.arg = bar_names, xlab = "Prediction", ylab = "Count", col = "blue", main = "Confusion Matrix")
# Assuming the confusion matrix is stored in the 'conf_mat' variable
# Extract the values from the confusion matrix
values <- c(conf_mat[1, 1], conf_mat[1, 2], conf_mat[2, 1], conf_mat[2, 2])
# Create names for the bars
bar_names <- c("True Negative", "False Positive", "False Negative", "True Positive")
# Plot the bar chart
barplot(values, names.arg = bar_names, xlab = "Prediction", ylab = "Count", col = "blue", main = "Confusion Matrix")
conf_mat_matrix <- as.matrix(conf_mat)
# Plot the heatmap
heatmap(conf_mat_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Confusion Matrix Heatmap")
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the pie chart
pie(survival_df$Count, labels = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic")
values <- c(conf_mat[1, 1], conf_mat[1, 2], conf_mat[2, 1], conf_mat[2, 2])
# Create labels for the pie slices
labels <- c("True Negative", "False Positive", "False Negative", "True Positive")
# Create colors for the pie slices
colors <- c("lightblue", "lightgreen", "pink", "lightyellow")
# Plot the pie chart
pie(values, labels = labels, col = colors, main = "Confusion Matrix Pie Chart")
# Define the confusion matrix
conf_mat <- matrix(c(85, 0, 0, 58), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
# Extract survival counts from the confusion matrix
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create a data frame with survival counts
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the histogram chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count", beside = TRUE)
survived <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create names for the bars
bar_names <- c("Did Not Survive", "Survived")
# Plot the bar chart
barplot(survived, names.arg = bar_names, xlab = "Survival", ylab = "Count", col = "lightblue", main = "Survival Bar Chart")
# Extract the values for the '0' and '1' classes from the confusion matrix
class_0 <- conf_mat[1, 1]
class_1 <- conf_mat[2, 1]
# Create x-values for the sine wave
x <- seq(0, 2 * pi, length.out = 100)
# Calculate y-values for the sine wave based on the '0' and '1' values
y <- sin(class_0 * x) + sin(class_1 * x)
# Plot the sine wave
plot(x, y, type = "l", xlab = "X", ylab = "Y", main = "Sine Wave Chart")
# Extract the values for the 'Survived' class from the confusion matrix
survived <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create x-values for the sine wave
x <- seq(0, 2 * pi, length.out = 100)
# Calculate y-values for the sine wave based on the 'Survived' values
y <- sin(survived * x)
# Plot the sine wave
plot(x, y, type = "l", xlab = "Survival", ylab = "Sine Value", main = "Sine Wave Chart")
View(ship_df)
mean_values <- colMeans(ship_df)
print(mean_values)
barplot(mean_values, main = "Mean Values", xlab = "Columns", ylab = "Mean", col = "blue")
mean_values <- colMeans(ship_df)
print(mean_values)
barplot(mean_values, main = "Mean Values", xlab = "Columns", ylab = "Mean", col = "blue")
barplot(null_sum, main = "Null Value Counts", xlab = "Columns", ylab = "Null Value Count", col = "blue")
null_columns <- colnames(ship_df)[apply(is.na(ship_df), 2, any)]
null_sum <- colSums(is.na(ship_df))
print(null_columns)
print(null_sum)
# Plot the bar chart
barplot(null_sum, main = "Null Value Counts", xlab = "Columns", ylab = "Null Value Count", col = "blue")
mean_age <- mean(ship_df$data.Age, na.rm = TRUE)
ship_df$data.Age[is.na(ship_df$data.Age)] <- mean_age
mean_values <- colMeans(ship_df)
print(mean_values)
barplot(mean_values, main = "Mean Values", xlab = "Columns", ylab = "Mean", col = "blue")
View(train_data)
View(test_data)
install.packages("caTools")
install.packages("caret")
library(caTools)
library(caret)
install.packages("e1071")
library(e1071)
confusionMatrix(conf_mat)
conf_mat_matrix <- as.matrix(conf_mat)
# Plot the heatmap
heatmap(conf_mat_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Confusion Matrix Heatmap")
conf_mat_matrix <- as.matrix(conf_mat)
# Plot the heatmap
heatmap(conf_mat_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Confusion Matrix Heatmap")
values <- c(conf_mat[1, 1], conf_mat[1, 2], conf_mat[2, 1], conf_mat[2, 2])
bar_names <- c("True Negative", "False Positive", "False Negative", "True Positive")
# Plot the bar chart
barplot(values, names.arg = bar_names, xlab = "Prediction", ylab = "Count", col = "blue", main = "Confusion Matrix")
conf_mat <- matrix(c(111, 0, 0, 68), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the bar chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count")
survived <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create names for the bars
bar_names <- c("Did Not Survive", "Survived")
# Plot the bar chart
barplot(survived, names.arg = bar_names, xlab = "Survival", ylab = "Count", col = "lightblue", main = "Survival Bar Chart")
# plot :
#________
conf_mat <- matrix(c(111, 0, 0, 68), nrow = 2, byrow = TRUE,
dimnames = list(Actual = c("0", "1"),
Predicted = c("0", "1")))
survival_counts <- c(conf_mat[1, 1], conf_mat[2, 1])
survival_df <- data.frame(Survived = c("No", "Yes"),
Count = survival_counts)
# Plot the bar chart
barplot(survival_df$Count, names.arg = survival_df$Survived,
col = c("red", "green"), main = "Survival in Titanic",
xlab = "Survival", ylab = "Count")
# Assuming the confusion matrix is stored in the 'conf_mat' variable
# Extract the values for the 'Survived' class from the confusion matrix
survived <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create names for the bars
bar_names <- c("Did Not Survive", "Survived")
# Plot the bar chart
barplot(survived, names.arg = bar_names, xlab = "Survival", ylab = "Count", col = "lightblue", main = "Survival Bar Chart")
# Extract the values for the '0' and '1' classes from the confusion matrix
class_0 <- conf_mat[1, 1]
class_1 <- conf_mat[2, 1]
# Create x-values for the sine wave
x <- seq(0, 2 * pi, length.out = 100)
# Calculate y-values for the sine wave based on the '0' and '1' values
y <- sin(class_0 * x) + sin(class_1 * x)
# Plot the sine wave
plot(x, y, type = "l", xlab = "X", ylab = "Y", main = "Sine Wave Chart")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
model <- glm(Y~train_data$data.Pclass+train_data$data.Sex+train_data$data.Age,train_data$data.Fare, family="binomial", data=train_data)
train_data$data.Sex <- as.integer(train_data$data.Sex)
train_data$data.Sex <- as.integer(train_data$data.Sex)
train_data$data.Age <- as.integer(train_data$data.Age)
train_data$data.Fare <- as.integer(train_data$data.Fare)
model <- glm(Y~train_data$data.Pclass+train_data$data.Sex+train_data$data.Age,train_data$data.Fare, family="binomial", data=train_data)
test_data$data.Sex <- as.integer(test_data$data.Sex)
test_data$data.Age <- as.integer(test_data$data.Age)
test_data$data.Fare <- as.integer(test_data$data.Fare)
predictions <- predict(model, newdata = test_data, type = "response")
dim(test_data)
Y<-as.factor(test_data$data.Survived)
predictions <- predict(model, newdata = test_data, type = "response")
options(scipen=999)
summary(model)
predictions <- ifelse(predict(model, newdata = test_data, type = "response") > threshold, 1, 0)
ship_df = data.frame(data$Name,data$Pclass,data$Sex,data$Age,data$SibSp,data$Parch,data$Ticket,data$Fare,data$Cabin,data$Embarked,data$Survived)
head(ship_df,10)
null_columns <- colnames(ship_df)[apply(is.na(ship_df), 2, any)]
null_sum <- colSums(is.na(ship_df))
print(null_columns)
print(null_sum)
# Plot the bar chart
barplot(null_sum, main = "Null Value Counts", xlab = "Columns", ylab = "Null Value Count", col = "blue")
head(ship_df,10)
dim(ship_df)
mean_values <- colMeans(ship_df)
mean_age <- mean(ship_df$data.Age, na.rm = TRUE)
ship_df$data.Age[is.na(ship_df$data.Age)] <- mean_age
head(ship_df,10)
dim(ship_df)
mean_values <- colMeans(ship_df)
std_values <- apply(ship_df, 2, sd)
print(std_values)
barplot(std_values, main = "std Values", xlab = "Columns", ylab = "Mean", col = "green")
cor_matrix <- cor(ship_df)
str(train_data)
dim(train_data)
dim(test_data)
confusionMatrix(conf_mat)
conf_mat <- table(test_data$data.Survived,y_pred)
print(conf_mat)
confusionMatrix(conf_mat)
install.packages("e1071")
library(e1071)
confusionMatrix(conf_mat)
install.packages("caTools")
install.packages("caret")
library(caret)
confusionMatrix(conf_mat)
conf_mat_matrix <- as.matrix(conf_mat)
heatmap(conf_mat_matrix, col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Confusion Matrix Heatmap")
values <- c(conf_mat[1, 1], conf_mat[1, 2], conf_mat[2, 1], conf_mat[2, 2])
bar_names <- c("True Negative", "False Positive", "False Negative", "True Positive")
barplot(values, names.arg = bar_names, xlab = "Prediction", ylab = "Count", col = "blue", main = "Confusion Matrix")
# Assuming the confusion matrix is stored in the 'conf_mat' variable
# Extract the values for the 'Survived' class from the confusion matrix
survived <- c(conf_mat[1, 1], conf_mat[2, 1])
# Create names for the bars
bar_names <- c("Did Not Survive", "Survived")
# Plot the bar chart
barplot(survived, names.arg = bar_names, xlab = "Survival", ylab = "Count", col = "lightblue", main = "Survival Bar Chart")
model <- glm(Y~train_data$data.Pclass+train_data$data.Sex+train_data$data.Age,train_data$data.Fare, family="binomial", data=train_data)
